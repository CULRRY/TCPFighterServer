#pragma once

enum class Direction : BYTE
{
	LL,
	LU,
	UU,
	RU,
	RR,
	RD,
	DD,
	LD,
};

enum class PacketType : BYTE
{
	S_CREATE_MY_CHARACTER		= 0,
	S_CREATE_OTHER_CHARACTER	= 1,
	S_DELETE_CHARACTER			= 2,

	C_MOVE_START				= 10,
	S_MOVE_START				= 11,
	C_MOVE_STOP					= 12,
	S_MOVE_STOP					= 13,

	C_ATTACK1					= 20,
	S_ATTACK1					= 21,
	C_ATTACK2					= 22,
	S_ATTACK2					= 23,
	C_ATTACK3					= 24,
	S_ATTACK3					= 25,

	S_DAMAGE					= 30,

	C_SYNC						= 250,
	S_SYNC						= 251,
};

namespace protocol
{
	//---------------------------------------------------------------
	// 클라이언트 자신의 캐릭터 할당		Server -> Client
	//
	// 서버에 접속시 최초로 받게되는 패킷으로 자신이 할당받은 ID 와
	// 자신의 최초 위치, HP 를 받게 된다. (처음에 한번 받게 됨)
	// 
	// 이 패킷을 받으면 자신의 ID,X,Y,HP 를 저장하고 캐릭터를 생성시켜야 한다.
	//
	//	4	-	ID
	//	1	-	Direction	(LL / RR)
	//	2	-	X
	//	2	-	Y
	//	1	-	HP
	//
	//---------------------------------------------------------------
#pragma pack(push, 1)
	struct S_CREATE_MY_CHARACTER
	{
		int32		id;
		Direction	dir;
		int16		x;
		int16		y;
		int8		hp;
	};


	//---------------------------------------------------------------
	// 다른 클라이언트의 캐릭터 생성 패킷		Server -> Client
	//
	// 처음 서버에 접속시 이미 접속되어 있던 캐릭터들의 정보
	// 또는 게임중에 접속된 클라이언트들의 생성용 정보.
	//
	//
	//	4	-	ID
	//	1	-	Direction	(LL / RR)
	//	2	-	X
	//	2	-	Y
	//	1	-	HP
	//
	//---------------------------------------------------------------
#pragma pack(push, 1)
	struct S_CREATE_OTHER_CHARACTER
	{
		int32		id;
		Direction	dir;
		int16		x;
		int16		y;
		int8		hp;
	};


	//---------------------------------------------------------------
	/// 캐릭터 삭제 패킷						Server -> Client
	///
	/// 캐릭터의 접속해제 또는 캐릭터가 죽었을때 전송됨.
	///
	///	4	-	ID
	///
	//---------------------------------------------------------------
#pragma pack(push, 1)
	struct S_DELETE_CHARACTER
	{
		int32 id;
	};

	//---------------------------------------------------------------
	// 캐릭터 이동시작 패킷						Client -> Server
	//
	// 자신의 캐릭터 이동시작시 이 패킷을 보낸다.
	// 이동 중에는 본 패킷을 보내지 않으며, 키 입력이 변경되었을 경우에만
	// 보내줘야 한다.
	//
	// (왼쪽 이동중 위로 이동 / 왼쪽 이동중 왼쪽 위로 이동... 등등)
	//
	//	1	-	Direction	( 방향 디파인 값 8방향 사용 )
	//	2	-	X
	//	2	-	Y
	//
	//---------------------------------------------------------------
#pragma pack(push, 1)
	struct C_MOVE_START
	{
		Direction	dir;
		int16		x;
		int16		y;
	};

	//---------------------------------------------------------------
	// 캐릭터 이동시작 패킷						Server -> Client
	//
	// 다른 유저의 캐릭터 이동시 본 패킷을 받는다.
	// 패킷 수신시 해당 캐릭터를 찾아 이동처리를 해주도록 한다.
	// 
	// 패킷 수신 시 해당 키가 계속해서 눌린것으로 생각하고
	// 해당 방향으로 계속 이동을 하고 있어야만 한다.
	//
	//	4	-	ID
	//	1	-	Direction	( 방향 디파인 값 8방향 )
	//	2	-	X
	//	2	-	Y
	//
	//---------------------------------------------------------------
#pragma pack(push, 1)
	struct S_MOVE_START
	{
		int32 id;
		Direction dir;
		int16 x;
		int16 y;
	};

	//---------------------------------------------------------------
	// 캐릭터 이동중지 패킷						Client -> Server
	//
	// 이동중 키보드 입력이 없어서 정지되었을 때, 이 패킷을 서버에 보내준다.
	// 이동중 방향 전환시에는 스탑을 보내지 않는다.
	//
	//	1	-	Direction	( 방향 디파인 값 좌/우만 사용 )
	//	2	-	X
	//	2	-	Y
	//
	//---------------------------------------------------------------
#pragma pack(push, 1)
	struct C_MOVE_STOP
	{
		Direction	dir;
		int16		x;
		int16		y;
	};

	//---------------------------------------------------------------
	// 캐릭터 이동중지 패킷						Server -> Client
	//
	// ID 에 해당하는 캐릭터가 이동을 멈춘것이므로 
	// 캐릭터를 찾아서 방향과, 좌표를 입력해주고 멈추도록 처리한다.
	//
	//	4	-	ID
	//	1	-	Direction	( 방향 디파인 값. 좌/우만 사용 )
	//	2	-	X
	//	2	-	Y
	//
	//---------------------------------------------------------------
#pragma pack(push, 1)
	struct S_MOVE_STOP
	{
		int32		id;
		Direction	dir;
		int16		x;
		int16		y;
	};

	//---------------------------------------------------------------
	// 캐릭터 공격 패킷							Client -> Server
	//
	// 공격 키 입력시 본 패킷을 서버에게 보낸다.
	// 충돌 및 데미지에 대한 결과는 서버에서 알려 줄 것이다.
	//
	// 공격 동작 시작시 한번만 서버에게 보내줘야 한다.
	//
	//	1	-	Direction	( 방향 디파인 값. 좌/우만 사용 )
	//	2	-	X
	//	2	-	Y	
	//
	//---------------------------------------------------------------
#pragma pack(push, 1)
	struct C_ATTACK1
	{
		Direction	dir;
		int16		x;
		int16		y;
	};

	//---------------------------------------------------------------
	// 캐릭터 공격 패킷							Server -> Client
	//
	// 패킷 수신시 해당 캐릭터를 찾아서 공격1번 동작으로 액션을 취해준다.
	// 방향이 다를 경우에는 해당 방향으로 바꾼 후 해준다.
	//
	//	4	-	ID
	//	1	-	Direction	( 방향 디파인 값. 좌/우만 사용 )
	//	2	-	X
	//	2	-	Y
	//
	//---------------------------------------------------------------
#pragma pack(push, 1)
	struct S_ATTACK1
	{
		int32		id;
		Direction	dir;
		int16		x;
		int16		y;
	};

	//---------------------------------------------------------------
	// 캐릭터 공격 패킷							Client -> Server
	//
	// 공격 키 입력시 본 패킷을 서버에게 보낸다.
	// 충돌 및 데미지에 대한 결과는 서버에서 알려 줄 것이다.
	//
	// 공격 동작 시작시 한번만 서버에게 보내줘야 한다.
	//
	//	1	-	Direction	( 방향 디파인 값. 좌/우만 사용 )
	//	2	-	X
	//	2	-	Y	
	//
	//---------------------------------------------------------------
#pragma pack(push, 1)
	struct C_ATTACK2
	{
		Direction	dir;
		int16		x;
		int16		y;
	};

	//---------------------------------------------------------------
	// 캐릭터 공격 패킷							Server -> Client
	//
	// 패킷 수신시 해당 캐릭터를 찾아서 공격1번 동작으로 액션을 취해준다.
	// 방향이 다를 경우에는 해당 방향으로 바꾼 후 해준다.
	//
	//	4	-	ID
	//	1	-	Direction	( 방향 디파인 값. 좌/우만 사용 )
	//	2	-	X
	//	2	-	Y
	//
	//---------------------------------------------------------------
#pragma pack(push, 1)
	struct S_ATTACK2
	{
		int32		id;
		Direction	dir;
		int16		x;
		int16		y;
	};

	//---------------------------------------------------------------
	// 캐릭터 공격 패킷							Client -> Server
	//
	// 공격 키 입력시 본 패킷을 서버에게 보낸다.
	// 충돌 및 데미지에 대한 결과는 서버에서 알려 줄 것이다.
	//
	// 공격 동작 시작시 한번만 서버에게 보내줘야 한다.
	//
	//	1	-	Direction	( 방향 디파인 값. 좌/우만 사용 )
	//	2	-	X
	//	2	-	Y	
	//
	//---------------------------------------------------------------
#pragma pack(push, 1)
	struct C_ATTACK3
	{
		Direction	dir;
		int16		x;
		int16		y;
	};

	//---------------------------------------------------------------
	// 캐릭터 공격 패킷							Server -> Client
	//
	// 패킷 수신시 해당 캐릭터를 찾아서 공격1번 동작으로 액션을 취해준다.
	// 방향이 다를 경우에는 해당 방향으로 바꾼 후 해준다.
	//
	//	4	-	ID
	//	1	-	Direction	( 방향 디파인 값. 좌/우만 사용 )
	//	2	-	X
	//	2	-	Y
	//
	//---------------------------------------------------------------
#pragma pack(push, 1)
	struct S_ATTACK3
	{
		int32		id;
		Direction	dir;
		int16		x;
		int16		y;
	};

	//---------------------------------------------------------------
	// 캐릭터 데미지 패킷							Server -> Client
	//
	// 공격에 맞은 캐릭터의 정보를 보냄.
	//
	//	4	-	AttackID	( 공격자 ID )
	//	4	-	DamageID	( 피해자 ID )
	//	1	-	DamageHP	( 피해자 HP )
	//
	//---------------------------------------------------------------
#pragma pack(push, 1)
	struct S_DAMAGE
	{
		int32	attackId;
		int32	damageId;
		int8	damageHp;
	};
}